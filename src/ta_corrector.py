# ta_corrector.py

# قائمة الكلمات التي يحدث فيها التناوب (المرشحة لتطبيق قاعدة المعلوم/المجهول)
# التاء المفتوحة (ت) تحدث إذا وجدت إحدى القرائن التالية
TA_ALTERNATING_WORDS = [
    "رحمة", "نعمة", "سنة", "لعنة", "امرأة", "معصية",
    "فطرة", "بقية", "كلمة", "شجرة", "قرة", "جنة",
    "آية", "بينة", "ثمرة", "غيابة", "جمالة"
]

# القائمة الموحدة للقرائن التي تجعل المعنى "معلوماً" للمخاطب (تُوجب التاء المفتوحة 'ت')
# القرائن هنا يجب أن تُستخلَص من الجدول التحليلي الذي اتفقنا عليه
KNOWN_CLUES = {
    # 'الرحمة' تصبح 'رحمت' إذا كان التعيين خاص بالنبوة أو القسمة الإلهية
    "رحمة": ["ربك", "يقسمون", "آتيناه"], 
    # 'النعمة' تصبح 'نعمت' إذا كان هناك تركيز على العدّ أو التذكير
    "نعمة": ["الله", "تعدوا", "تذكروا"],
    # 'امرأة' تصبح 'إمرأت' عند التخصيص باسم عَلَم
    "امرأة": ["نوح", "لوط", "فرعون", "عمران"],
    # 'جنة' تصبح 'جنت' عند التخصيص بوصف الجنة أو الملتقى
    "جنة": ["نعيم", "روح"], 
    # 'سنة' تصبح 'سنت' عندما يشدد على عدم التبديل أو التحويل
    "سنة": ["تبديلا", "تحويلا", "الأولين"],
    # (يمكن إضافة المزيد من الكلمات والقرائن هنا...)
}


def apply_pragmatic_ta_rule(text: str) -> str:
    """
    يطبق قاعدة المعلوم/المجهول (التعيين البرغماتي) لتاء التأنيث.

    Args:
        text (str): النص المراد تصحيحه.

    Returns:
        str: النص المصحح وفقاً للقاعدة الجديدة.
    """
    
    words = text.split()
    corrected_words = []
    
    for i, word in enumerate(words):
        # تجريد الكلمة من التاء المربوطة والمفتوحة للتحقق من الأصل
        clean_word = word.strip("ةت") 
        
        # 1. فحص هل الكلمة هي من الكلمات التي يحدث فيها التناوب (نطاق عمل القاعدة)
        if clean_word in [w.strip("ة") for w in TA_ALTERNATING_WORDS]:
            
            # افتراض أن الأصل هو التاء المربوطة (العموم/المجهول)
            is_designated = False 
            word_key = clean_word + "ة"
            
            # --- آليات الكشف عن "القرينة المعلومة" (التي توجب التاء المفتوحة 'ت') ---
            
            # إذا كان الجذر موجوداً في قائمة القرائن المعلومة
            if word_key in KNOWN_CLUES:
                clues = KNOWN_CLUES[word_key]
                
                # البحث في نافذة سياقية محدودة (3 كلمات بعد و 3 كلمات قبل)
                start_index = max(0, i - 3)
                end_index = min(len(words), i + 4) # 3 كلمات بعد
                
                for j in range(start_index, end_index):
                    if i != j: # لا نبحث في الكلمة نفسها
                        # التحقق من وجود القرينة المعلومة في السياق
                        context_word = words[j].strip(",.;:").lower()
                        if context_word in [c.lower() for c in clues]:
                            is_designated = True
                            break
            
            # -----------------------------------------------------------
            
            # تطبيق القاعدة الجديدة
            if is_designated:
                # التاء المفتوحة = المعلوم/المحدد
                corrected_words.append(clean_word + "ت")
            else:
                # التاء المربوطة = المجهول/غير المحدد
                # ملاحظة: إذا كانت الكلمة الأصلية تحتوي على تشكيل أو مد، يجب إضافته هنا.
                corrected_words.append(clean_word + "ة") 
        
        else:
            # إذا لم تكن الكلمة من نطاق عمل القاعدة، نضيفها كما هي
            corrected_words.append(word)

    # إعادة تجميع الكلمات المصححة في نص واحد
    return " ".join(corrected_words)
